00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/7/2021 10:51:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Introduction to 68K
00000000                             3  * Written by : Eunhee Kim
00000000                             4  * Date       : 04/10/2021
00000000                             5  * Description: 
00000000                             6  *-----------------------------------------------------------
00000000                             7  * Watch out for comments, if the text spills over to the next line and you  forget to use an asterisk, you'll get an error.
00000000                             8  
00000000                             9  **********************************************************************
00000000                            10  
00000000                            11  *
00000000                            12  
00000000                            13  *  Beginning of EQUates section, just like #define in C
00000000                            14  
00000000                            15  *
00000000                            16  
00000000                            17  **********************************************************************
00000000                            18  
00000000  =00004000                 19  addr1     EQU     $4000        
00000000                            20  
00000000  =00004001                 21  addr2     EQU     $4001 
00000000                            22  
00000000  =0000A7FF                 23  data2     EQU     $A7FF 
00000000                            24  
00000000  =00005555                 25  data3     EQU     $5555 
00000000                            26  
00000000  =00000000                 27  data4     EQU     $0000 
00000000                            28  
00000000  =00001246                 29  data5     EQU     4678 
00000000                            30  
00000000  =0000004F                 31  data6     EQU     %01001111 
00000000                            32  
00000000  =00000017                 33  data7     EQU     %00010111 
00000000                            34  
00000000                            35   
00000000                            36  
00000000                            37  **********************************************************************
00000000                            38  
00000000                            39  *
00000000                            40  
00000000                            41  * Beginning of code segment. This is the actual assembly language instructions.
00000000                            42  
00000000                            43  *
00000000                            44  
00000000                            45  *****************************************************************************************************
00000000                            46  
00000000                            47   
00000000                            48  
00000400                            49           ORG       $400          * This pseudo op code tells the assembler  here                                                                                                                         
00000400                            50  
00000400                            51                                             * the program will run in memory
00000400                            52  
00000400  303C A7FF                 53  start    MOVE.W    #data2,D0     * Load D0 
00000404                            54  
00000404  123C 004F                 55           MOVE.B    #data6,D1     * Load D1 
00000408                            56  
00000408  143C 0017                 57           MOVE.B    #data7,D2     * load D2 
0000040C                            58  
0000040C  363C 5555                 59           MOVE.W    #data3,D3     * load D3 
00000410                            60  
00000410  307C 4000                 61           MOVEA.W   #addr1,A0     * load address register 
00000414                            62  
00000414  10C1                      63           MOVE.B    D1,(A0)+      * transfer byte to memory 
00000416                            64  
00000416  10C2                      65           MOVE.B    D2,(A0)+      * transfer second byte
00000418                            66  
00000418  327C 4000                 67           MOVEA.W   #addr1,A1     * load address 
0000041C                            68  
0000041C  C751                      69           AND.W     D3,(A1)       * Logical AND
0000041E                            70  
0000041E                            71   
0000041E                            72  
0000041E                            73  *Stop here. The next instruction shows how a label is used
0000041E                            74  
0000041E                            75   
0000041E                            76  
0000041E  4EF8 0400                 77          JMP        start         * This instruction keeps the program
00000422                            78  
00000422                            79                                   * looping forever
00000422                            80  
00000422                            81          END   $400            * This pseudo op-code tells the assembler 

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDR1               4000
ADDR2               4001
DATA2               A7FF
DATA3               5555
DATA4               0
DATA5               1246
DATA6               4F
DATA7               17
START               400
